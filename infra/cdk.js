#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_ecs_1 = require("aws-cdk-lib/aws-ecs");
const aws_autoscaling_1 = require("aws-cdk-lib/aws-autoscaling");
const path = require("path");
const constructs_1 = require("constructs");
const aws_logs_1 = require("aws-cdk-lib/aws-logs");
const aws_route53_1 = require("aws-cdk-lib/aws-route53");
const aws_certificatemanager_1 = require("aws-cdk-lib/aws-certificatemanager");
const aws_ecs_patterns_1 = require("aws-cdk-lib/aws-ecs-patterns");
const aws_route53_targets_1 = require("aws-cdk-lib/aws-route53-targets");
const aws_ecr_1 = require("aws-cdk-lib/aws-ecr");
const aws_ecs_2 = require("aws-cdk-lib/aws-ecs");
const root = path.join(__dirname, `..`);
const app = new cdk.App();
const env = { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION };
const vpcStack = new aws_cdk_lib_1.Stack(app, 'vpc', { env });
const vpc = new aws_ec2_1.Vpc(vpcStack, 'vpc', {
    flowLogs: {
        FlowLogCloudWatch: {
            trafficType: aws_ec2_1.FlowLogTrafficType.ALL,
            destination: aws_ec2_1.FlowLogDestination.toCloudWatchLogs(),
        },
    },
    natGateways: 1,
    maxAzs: 3,
});
const ecsStack = new aws_cdk_lib_1.Stack(app, 'ecs-c7g-large', { env });
const cluster = new aws_ecs_1.Cluster(ecsStack, 'ecs', {
    vpc,
    clusterName: 'ecs-c7g-large',
    containerInsights: true,
});
cluster.connections.allowFromAnyIpv4(aws_ec2_1.Port.tcp(80));
cluster.connections.allowToAnyIpv4(aws_ec2_1.Port.tcp(80));
const type = "c7g.large";
const INSTANCE = aws_ec2_1.InstanceType.of(aws_ec2_1.InstanceClass.C7G, aws_ec2_1.InstanceSize.LARGE);
const asg = new aws_autoscaling_1.AutoScalingGroup(ecsStack, "AutoScalingGroup", {
    autoScalingGroupName: "EcsC7gLargeAutoScalingGroup",
    instanceType: INSTANCE,
    vpc,
    groupMetrics: [aws_autoscaling_1.GroupMetrics.all()],
    minCapacity: 1,
    maxCapacity: 1,
    machineImage: aws_ecs_1.EcsOptimizedImage.amazonLinux2(aws_ecs_2.AmiHardwareType.ARM),
    associatePublicIpAddress: true,
    vpcSubnets: {
        subnetType: aws_ec2_1.SubnetType.PUBLIC
    },
    allowAllOutbound: true,
});
const asgCapacityProvider = new aws_ecs_1.AsgCapacityProvider(ecsStack, `asgCapacityProvider`, {
    autoScalingGroup: asg,
    // canContainersAccessInstanceRole: true,
    capacityProviderName: `C7gLargeAsgCapacityProvider`,
});
cluster.addAsgCapacityProvider(asgCapacityProvider);
asgCapacityProvider.autoScalingGroup.connections.allowFromAnyIpv4(aws_ec2_1.Port.allTcp());
asgCapacityProvider.autoScalingGroup.connections.allowToAnyIpv4(aws_ec2_1.Port.allTcp());
const domain = process.env.DOMAIN;
class Service extends constructs_1.Construct {
    constructor(scope, id, props) {
        var _a;
        super(scope, id);
        const service = props.name;
        const service_cased = service.charAt(0).toUpperCase() + service.slice(1);
        const service_name = `${service}-service`;
        // const asset = new DockerImageAsset(this, `Image`, {
        //     directory: path.join(root, service),
        //     buildArgs: {
        //         ARCH: INSTANCE.architecture === InstanceArchitecture.ARM_64 ? "arm64" : "amd64",
        //     }
        // });
        // new CfnOutput(this, `ImageUriEcrCfnOut`, {
        //     value: asset.imageUri,
        //     exportName: `${service_cased}ImageUriECR`,
        //     description: `Image URI from ECR`,
        // });
        // const instanceType = props.instanceType || "c7g.large";
        //
        // const placementConstraints = instanceType
        //     ? [
        //         PlacementConstraint.memberOf(
        //             `attribute:ecs.instance-type == ${instanceType}`
        //         ),
        //     ]
        //     : [];
        const taskDefinition = new aws_ecs_1.Ec2TaskDefinition(this, "TaskDef", {
            family: service_name,
        });
        taskDefinition.addContainer("Container", {
            image: aws_ecs_1.ContainerImage.fromEcrRepository(aws_ecr_1.Repository.fromRepositoryName(this, `${service}-ecr`, `${service}`)),
            portMappings: [
                {
                    containerPort: 80,
                    protocol: aws_ecs_1.Protocol.TCP,
                },
            ],
            containerName: service_name,
            environment: {
                AWS_REGION: process.env.AWS_REGION,
                AWS_DEFAULT_REGION: process.env.AWS_REGION,
                AWS_ACCESS_KEY_ID: process.env.AWS_ACCESS_KEY_ID,
                AWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY,
                S3_BUCKET: process.env.S3_BUCKET,
                DYNDB_TABLE: process.env.DYNDB_TABLE,
            },
            memoryReservationMiB: 2048,
            logging: new aws_ecs_1.AwsLogDriver({
                streamPrefix: service_name,
                logRetention: aws_logs_1.RetentionDays.ONE_WEEK,
            }),
        });
        let certificate = undefined;
        let hostedZone = undefined;
        if (props.domain) {
            hostedZone = aws_route53_1.HostedZone.fromLookup(this, `HostedZone`, {
                domainName: props.domain,
            });
            certificate = new aws_certificatemanager_1.Certificate(this, "Certificate", {
                domainName: `*.${props.domain}`,
                validation: aws_certificatemanager_1.CertificateValidation.fromDns(hostedZone),
            });
        }
        const loadBalancedEcsService = new aws_ecs_patterns_1.ApplicationLoadBalancedEc2Service(this, `Service`, {
            cluster,
            serviceName: service_name,
            loadBalancerName: `${service}-load-balancer`,
            desiredCount: 1,
            certificate,
            enableECSManagedTags: true,
            maxHealthyPercent: 400,
            minHealthyPercent: 100,
            // placementConstraints: placementConstraints,
            propagateTags: aws_ecs_1.PropagatedTagSource.TASK_DEFINITION,
            memoryReservationMiB: 2048,
            publicLoadBalancer: true,
            taskDefinition,
            healthCheckGracePeriod: props.timeout || aws_cdk_lib_1.Duration.seconds(60),
        });
        loadBalancedEcsService.listener.connections.allowFromAnyIpv4(aws_ec2_1.Port.allTcp());
        loadBalancedEcsService.listener.connections.allowToAnyIpv4(aws_ec2_1.Port.allTcp());
        loadBalancedEcsService.targetGroup.configureHealthCheck((_a = props.healthCheck) !== null && _a !== void 0 ? _a : {
            path: `/ping`,
        });
        if (hostedZone && loadBalancedEcsService.loadBalancer && certificate) {
            new aws_route53_1.ARecord(this, "DnsRecord", {
                recordName: service,
                zone: hostedZone,
                target: aws_route53_1.RecordTarget.fromAlias(new aws_route53_targets_1.LoadBalancerTarget(loadBalancedEcsService.loadBalancer)),
                ttl: aws_cdk_lib_1.Duration.minutes(1),
            });
        }
    }
}
let stack = new aws_cdk_lib_1.Stack(app, "task-site-service", {
    env,
    description: `Task site service`,
});
new Service(stack, "service", {
    name: "task-site",
    vpc,
    cluster
});
//# sourceMappingURL=data:application/json;base64,